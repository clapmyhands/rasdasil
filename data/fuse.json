{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Rasdasil","n":1},"1":{"v":"\nRasdasil ruins is the source of all magic in the story \"The Nebula's Civilization\"\n","n":0.267}}},{"i":2,"$":{"0":{"v":"Random","n":1}}},{"i":3,"$":{"0":{"v":"Coastal Defence on Flood Risk","n":0.447},"1":{"v":"\n[Wave tank demonstration showing the impact of coastal defences on flood risk](https://youtu.be/3yNoy4H2Z-o)\n\nOn beaches or coast, large volume of water movement such as during storm might result in flooding.\nSuch cases are problematic and coastal engineer are brought in to do coastal defense and help reduce impact.\n\nMultiple models are simulated and shown:\n\n1. Beach\nLarge enough water movement on a simple beach will result in water overflowing with nothing to stop it.\n1. Beach with extra wall\nA simple wall on top will reduce overflowing simply because of the added verticality.\nThe water simply have to travel/move more to overcome the wall.\n1. Vertical wall with no/eroded beach\nA simulation on eroded beach shows that with the removal of beach, the full amount of water hits the vertical wall straight.\nThis is used as a baseline.\n1. Vertical wall with (artifical) sloped revetment\nThe artifical slope is actually a mistake as it just reduces the power needed by the water to overcome the wall.\n1. Recurved wall with sloped revetment\nRecurved wall is a simple concave design to redirect the energy from the wave back into itself.\n1. Vertical wall with stepped revetment\nSimilar to sloped revetment, however stepped revetment is slightly better at reducing energy\n1. Rock armour\nA simple bunched up rock in front of the wall will efficiently reduce the water energy.\nThe wave now have to move up left right down which breaks apart the energy.\nCheap but trade off with aesthetic and other things.\n1. Submerged near-shore breakwater\nInstead of protecting near the beach, by trying to reduce the energy further off shore, it reduces the energy before it hits the wall.\nExpensive but very effective.\nCan be submerged or showing up above the waterline.\n","n":0.061}}},{"i":4,"$":{"0":{"v":"General","n":1}}},{"i":5,"$":{"0":{"v":"XY Problem","n":0.707},"1":{"v":"\nTime and time again throughout my career so far, I've met people that does not know how to ask questions properly. Just to be clear, this includes myself, in more than one occassion.\n\nI realize that we ask:\n1. without providing enough context\n2. in an indirect/vague manner\n3. for our immediate problem/attempted solution (instead of our actual goal)\n4. without mentioning what steps we have already tried ourself\n\nThis was something I intuitively feel until it was internalized by reading this website [The XY Problem](https://xyproblem.info/).\n\nEver since, this website has been a constant resource I share to most people I have worked with.\n\nThe solution is therefore to provide direct and upfront context about what we are trying to achieve, what steps we have done, and what is the difference between what we find compared to what we expected.\n\nOthers are therefore able to help us by giving a better approach if there's any, explain the mistakes in any of our approach, or tell us whatever other steps we are missing.\n\nThis saves the back and forth of drilling down toward the actual problem and saves everybody's time.","n":0.075}}},{"i":6,"$":{"0":{"v":"How Tech Loses Out","n":0.5},"1":{"v":"\n[How Tech Loses Out over at Companies, Countries and Continents](https://berthub.eu/articles/posts/how-tech-loses-out/)\n\nIf you outsource 90% of what your company does, the fate of the company does not lie in your hands.\nIf you separate the act of designing from the act of producing, the designer won't improve on producing better product.\nThis results in a loss of innovation.\n\nSmart Engineer wants to get their hands dirty and improve things.\nOutsourcing reduces risk but also removes the opportunity for engineer to improve their product and essentially cuts their job scope.\n\nAs an Engineer, try to fight to defend the important parts.\nThe one that decides the company's fate.\nLike how you can outsource the frame but should not on the microchip in a toaster.\nDont try to claim every little thing that might not matter, like the fuse in a toaster.\n\nOne of Boeing engineer gave [[Boeing Report on Outsourcing]] on how outsourcing essentially cuts their innovation.\n","n":0.083}}},{"i":7,"$":{"0":{"v":"To be sorted","n":0.577},"1":{"v":"\n## Articles\n\n### Specific Problem Solving\n#### Network\n\n- [Figma blog: Rate limiting](https://blog.figma.com/an-alternative-approach-to-rate-limiting-f8a06cf7c94c): Network Policy, Rate limit\n\n### Scripting\n\n- [Splitting Strings](https://chriszetter.com/blog/2017/10/29/splitting-strings/): Python, Ruby, Awk\n- [Seven habits of effective text editing](http://www.moolenaar.net/habits.html): Vim\n\n### Edification\n\n- [The Most Respectful Interpretation](https://www.farnamstreetblog.com/2017/01/most-respectful-interpretation/): Code Review\n- [At Some Point, You Have to Eat The Broccoli](https://www.farnamstreetblog.com/2016/10/eat-the-broccoli/)\n- [How to Do Code Reviews Like a Human (Part One)](https://mtlynch.io/human-code-reviews-1/): Code Review\n- [How to Do Code Reviews Like a Human (Part Two)](https://mtlynch.io/human-code-reviews-2/): Code Review\n- [The Senior Engineerâ€™s Guide to Helping Others Make Decisions](http://silverwraith.com/blog/2017/10/the-senior-engineers-guide-to-helping-others-make-decisions/): Mentoring\n- [Reality has a surprising amount of detail](http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail)\n\n### Software Craftmanship\n\n- [Something Rotten In The Core](http://www.codersnotes.com/notes/something-rotten-in-the-core/): UNIX philosophy, API, Software Design\n\n### Company Growth\n\n- [Finding Great Developers](https://www.joelonsoftware.com/2006/09/06/finding-great-developers-2/): Recruitment\n\n## Videos\n\n### C++\n\n- [What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid](https://youtu.be/bSkpMdDe4g4) : C++, Compiler, Assembly\n- [Learning and Teaching Modern C++](https://youtu.be/fX2W3nNjJIo): C++, Learning, Teaching, Modern C++\n\n### Platform\n\n- [The Container Revolution: Reflections After the First Decade ~ Bryan Cantrill](https://youtu.be/xXWaECk9XqM) : Container\n\n### Interview\n\n- [How to Get a Job at the Big 4 - Amazon, Facebook, Google & Microsoft](https://youtu.be/YJZCUhxNCv8) : Interview Prep\n- [ABC: Always Be Coding](https://medium.com/always-be-coding/abc-always-be-coding-d5f8051afce2): Primer, Guide\n\n### Edification\n\n- [John Cleese on Creativity in Management](https://youtu.be/Pb5oIIPO62g): Creativity, Management\n\n## Screencast\n\n- [Vim Casts](http://vimcasts.org/episodes/)\n  - [Swapping two regions of text with exchange.vim](http://vimcasts.org/episodes/swapping-two-regions-of-text-with-exchange-vim/)\n  - [Operating on search matches using gn](http://vimcasts.org/episodes/operating-on-search-matches-using-gn/)\n\n- [Destroy All Software: From Scratch](https://www.destroyallsoftware.com/screencasts/catalog/a-compiler-from-scratch): Vim, Introduction\n\n## Others\n\n- [Xiph: A Digital Media Primer for Geeks](https://xiph.org/video/vid1.shtml): Audio, Video, History\n","n":0.068}}},{"i":8,"$":{"0":{"v":"Dev","n":1},"1":{"v":"\n1. [Mocks Aren't Stubs](https://martinfowler.com/articles/mocksArentStubs.html)\n2. [stripe idempotency keys](https://brandur.org/idempotency-keys#atomic-phases)","n":0.378}}},{"i":9,"$":{"0":{"v":"Test","n":1}}},{"i":10,"$":{"0":{"v":"Flaky Tests","n":0.707},"1":{"v":"\n[Tests that sometimes fail - flaky test tips](https://samsaffron.com/archive/2019/05/15/tests-that-sometimes-fail)\n\n- [1. Definition](#1-definition)\n- [2. Background](#2-background)\n- [3. Several pattern of Flakiness](#3-several-pattern-of-flakiness)\n  - [3.1. Hard coded id](#31-hard-coded-id)\n  - [3.2. Random data](#32-random-data)\n  - [3.3. Database execution ordering assumptions](#33-database-execution-ordering-assumptions)\n  - [3.4. Time assumptions](#34-time-assumptions)\n  - [3.5. Concurrency](#35-concurrency)\n  - [3.6. Leaky global state](#36-leaky-global-state)\n  - [3.7. Assumptions about environment](#37-assumptions-about-environment)\n- [4. How to handle Flaky test](#4-how-to-handle-flaky-test)\n\n## 1. Definition\n\nSometimes when tests are written, they might become test that fails intermittently. These are called flaky test or heisentest (in relation to [heisenbug](https://en.wikipedia.org/wiki/Heisenbug))\n\n## 2. Background\n\nFlaky test incurs cost not only in time spent on the pipeline, but also on developer's time.\nHence it is crucial that we either remove flakiness or fix it.\nFixing flaky tests might also result in fixing an actual bug hidden inside the code.\n\n## 3. Several pattern of Flakiness\n\n### 3.1. Hard coded id\n\nWhen using database with auto increment ids, sometimes its easier for us to simply assign id and check whether it is equal to some hard coded id.\nThis can be further generalized as any hardcoded assumptions.\nTODO: reread and fix this part\n\n### 3.2. Random data\n\nsome unexpected data/input can expose a bug or a wrong assumption deep inside the code.\nThis is how Fuzzy testing (or commonly known as [Fuzzing](https://en.wikipedia.org/wiki/Fuzzing) come to be.\nFuzzy testing work by generating random data with some restriction which is used to hit the system.\n\n### 3.3. Database execution ordering assumptions\n\nthis is related to point 1 in that order should not be assumed unless explicitly ordered by the developer (no pun intended)\n\n### 3.4. Time assumptions\n\nTime is one of those things that we don't usually think about testing for/about; because, how can Time fail?\nHowever, code that is basing its logic on time can fail and code should be designed to be easily testable even against time.\n\nRelated to this is places where we use time.Sleep to wait on some asynchronous or background processing.\nThis is a typical flaky smell; not only does this make your test take longer, it's also implicit on what it's waiting for.\nIf the code needs to take some specific amount of time, then it should be explicit.\nOtherwise, Test should not rely on sleep to wait on some correct state.\nInstead, use polling or some explicit way to sync the state.\nPossibly by calling a function and processing it synchronously instead of waiting on some state to be true.\n\n### 3.5. Concurrency\nSemi-related to [time assumptions](#time-assumptions).\nIf we use background processing in test, it could result race condition.\nEspecially if tests are run in parallel.\n\n### 3.6. Leaky global state\nSometimes tests modifies some global state.\nUnless the test suite are reset to a pristine state, there can be some modified global state between tests.\nThis would result in some condition being true only if tests are run in certain order.\nHence why tests should always be run in random order.\n\n### 3.7. Assumptions about environment\nRemember that in the end your code are not only running locally.\nIt is also tested locally, in CI/CD pipeline, and running in production.\nIt is hard to make sure the condition is always the same (even if you use container).\nThere will be small differences here and there and thats why you should challenge your assumptions.\nTODO: reread this part and fix\n\n## 4. How to handle Flaky test\n\nHandling flaky test should be a team effort.\nAssign flaky test to original test writer to fix, and give post mortem on how it come to be.\nTreat it like an incident and figure out the root cause.\n\nBelow are several points on how to work as a team to reduce flakiness:\n\n1. Should be a team concern\nIt should be a team decision to either remove, run repeatedly, ignore, or invest time to find cause and fix\n2. Stopping deployment if any test failed\nDepends on urgency, when deployment timeline is tight, test can be quarantined/excluded temporarily\n3. Run test in random order\n4. Invest in making tests run faster\nTighter loop means it can be run faster on a loop and flaky test are found faster\n5. Regularly run test suite\nThis can be done in asynchronous manner to actual code change to prod.\nVery rare flaky test can be found if your test suite are fast and you're running it endlessly (even if say chance of happening is 1/xxxxx)\n6. Add log in unexpected flaky case\n","n":0.038}}},{"i":11,"$":{"0":{"v":"Ds","n":1}}},{"i":12,"$":{"0":{"v":"Heap Vs Redblack Tree","n":0.5},"1":{"v":"\n[Why use heap over red-black tree?](https://cs.stackexchange.com/questions/105899/why-use-heap-over-red-black-tree)\n\nheap and rbt have similar insert/remove property\nfinding element in heap is O(n) while rbt is O(lg n)\nrbt takes more memory footprint (more poi   nters) and bookkeeping on the structure itself but can be sparse\nwhile heap usually use array which have dynamic resize cost but clustered in memory\ncan use treemap for heap operation (get min/max)\n\n","n":0.13}}},{"i":13,"$":{"0":{"v":"Arch","n":1}}},{"i":14,"$":{"0":{"v":"Listening to Binlog","n":0.577},"1":{"v":"\nIt's possible to listen to database binlog as an event stream.\nThe binlog events can trigger any action based on the changed data e.g. [[Cache Invalidation]] / callback.\n\nThis might seem like overkill or wasteful if only a small subset of binlog event is of interest.\nHowever this is an easy way of adding event handling that happens on committed record.\n","n":0.131}}},{"i":15,"$":{"0":{"v":"Hexagonal Architecture","n":0.707},"1":{"v":"\nhttps://julien-topcu.medium.com/decoupling-your-technical-code-from-your-business-logic-with-the-hexagonal-architecture-hexarch-b4da7ba62079\n\nlike an onion/layered hexagon, put your domain logic in the innermost part and make it agnostic to the implementation detail.\nprovide interface and depend on interface to remove coupling between layer.\nAPIs will use the provided interface of the domain, and the domain will be provided the implementation of the interface dependency.\n\nother example:\nhttps://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749\n","n":0.14}}},{"i":16,"$":{"0":{"v":"Domain Driven Design","n":0.577},"1":{"v":"\ndesigning aggregate:\nhttps://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf\nhttps://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_2.pdf\nhttps://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_3.pdf\n\nexample case study:\nhttps://awesomeopensource.com/project/Sairyss/domain-driven-hexagon#Domain-Layer\n","n":0.5}}},{"i":17,"$":{"0":{"v":"Cache","n":1},"1":{"v":"\n## Usage Pattern\n\n### Read Through\n\nRead cache, when not found, check database, write result back to cache.\nMight have issues with load on cold cache.\n\n### Write Through\n\nSynchronously write to database then cache.\nSafe because database is written first.\n\n### Write Behind\n\nWrite to cache then asynchronously write to database.\nTypically faster than writing to database and supports batch write but has a chance of losing the write to database.\nPossible race condition issue when handling multiple asynchronous write.\n\n### Write Invalidate\n\nWrite to database then invalidate the cache.\nThis results in cache miss on next read.\nTypically paired with [Read Through](#read-through)\n\n### Cache Warming\n\nPrefill cache (warming up) in preparation for high load to reduce time spent on writing to cache on miss.\nThis can be used on high demand key or regularly updating low demand key.\n","n":0.09}}}]}
